

     《跨平台的序列化和反序列化，你到底知道多少？》
     1: 什么是序列化和反序列化
      序列化：是一种将对象按照一定的规则生成的一连串有序的字符串的过程（二进制，特定字符串，xml/json）
      反序列化：是一种将这些字符重建(组装)成一个内存对象的过程。
      存在即便合理。
     2:什么情况下需要序列化
      a:内存中的对象保存到数据库中或者磁盘上。(持久化)
      b:在跨平台的情况下，需要网络来传递对象的时候，典型的(WebService SOAP)
      c:需要通过rmi传输对象的时候（仅限于java环境下）
      d:RPC服务器的时候（dubbo）。

      3：如何实现序列化
      将需要序列化的类实现Serialize接口接口。
      4：序列化和反序列化的例子
      5：默认序列化机制
      6：影响序列化
        a: transient 关键字
           如果你想对有一些属性你要保密操作，你可以使用transient修改，那么这个修饰的属性就不参与序列化操作
        b:静态变量是否能序列化
           静态成员是不可以被序列化的。因为静态成员属于类本身.
        c:writeObject()和readObject()方法
           覆盖两个方法以后，可以打破transient修饰的属性。可以打破默认的序列化规则

       7 ExtSerialize
       8:readResolve()
       同时满足序列化和单例模式的要求吗，通过改方法确保在同一jvm中只有一个对象引用。
       9：序列化ID
       跨平台，跨服务，序列化ID如果不一致的话，会导致㞏反序列化。






















